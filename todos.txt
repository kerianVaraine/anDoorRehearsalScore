TODO:

[ ] try deploy on heroku for always available...
    https://devcenter.heroku.com/articles/node-websockets -- very basic deploy guide for websocket app./


[x] collapse update dynamics functions into one call, with checks in that function...

[x] what buttons need to be there and which do not? 

[barely] style the page elements, playback buttons need to be nicer... << > || >> --- 

[ ] Performance notes: 
    load a specific svg with instructions on it, button clickable on main page. 
        make as a modal style popup?

[ ] make more efficient, HA!

Must Haves:

    [ ] UX: Progress bar for entire piece... maybe?


    [x] Synced across performers:
        Central control for initiating all actions, ie: "conductor" view.
    
    [x] Conductor Logic:
            set rehearsal mark, play, pause.
 

    [ ] Styling:
        [x] normalize.css
        [ ] Interaction Feedback, ie: change colours of buttons when playing, fast forwarding etc
        [ ] make things more UX friendly, button labeling, 
        [ ] Invert Colours?


Score Finishing:
    [x] Dynamics: ADS svg icons that hover while scrolling, 
            indicating how the attack of note heads happens.
        Attack Decay Sustain x axis, y axis = loudness ie:pp->ff
        Release is shown through dynamics in score. used sparingly. 
            If no dynamics then abrupt end to note


REDOING SCORE FROM SCRATCH:
Export from sibelius as svg
Using inkscape 1.0.2; seperately group all noteheads, staves, clefs, accidentals, rehearsal marks etc
object to path and triple check each group
You can filter different text based note heads and accidentals using the find function

save as compressed svg with appropriate options, ends up round 550kb. 


--Optimizing steps
Trying to reduce object count? path sizes? for smoother animation.
Deep Ungroup
merge paths like noteheads and duration lines? 
	-would have to be done individually per section... could clean up nicer with little bumps on notepads though...

Keeping the document size to what sibelius exports as is important to my use case, it keeps the numbers clean in web code as I started with sibelius standard margins for score start
Duration lines should actually be lines and not rectangle paths. this happened because of how sibelius draws the beams I used to make the lines. Next time I'll find a better method of creating these scores.



Huge Difference in CPU usage even just doing a path union per part, creating 5 long ass paths. Also size reduced dramatically. Still room to be better, but not sure how much better it can be...
Vector NANO makes it go slower... not good.


Optimize final steps:
-- Loading performance notes dynamically from contents of svg.
Much better than having it in-line always loaded and just hidden.
CODE:
(async () => {
        const perfNotesSVG = await (await fetch("./assets/performanceNotes.svg")).text();
        performanceNotes.innerHTML = perfNotesSVG;
    })();

    Reuse same kind of code to load in the score in parts, depending on which part is selected. Needs testing, but should work ok...